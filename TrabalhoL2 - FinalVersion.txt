(*++++++++++++++++++++++++++++++++++++++*)
(*  Interpretador para L1               *)
(*   - inferência de tipos              *)
(*   - avaliador big step com ambiente  *)
(*++++++++++++++++++++++++++++++++++++++*)



(**+++++++++++++++++++++++++++++++++++++++++*)
(*  SINTAXE, AMBIENTE de TIPOS e de VALORES *)
(*++++++++++++++++++++++++++++++++++++++++++*)

type tipo =
    TyInt
  | TyBool
  | TyFn of tipo * tipo
  | TyPair of tipo * tipo
  | TyRef of tipo
  | TyUnit 

type ident = string

type op = Sum | Sub | Mult | Eq | Gt | Lt | Geq | Leq

type expr =
  | Num of int
  | Var of ident
  | True
  | False
  | Binop of op * expr * expr
  | Pair of expr * expr
  | Fst of expr
  | Snd of expr
  | If of expr * expr * expr
  | Fn of ident * tipo * expr
  | App of expr * expr
  | Let of ident * tipo * expr * expr
  | LetRec of ident * tipo * expr  * expr
  | Asg of expr * expr
  | Dref of expr
  | New of expr
  | Seq of expr * expr
  | Whl of expr * expr
  | Skip
              
type tenv = (ident * tipo) list

type valor =
    VNum of int
  | VTrue
  | VFalse
  | VPair of valor * valor
  | VClos  of ident * expr * renv
  | VRclos of ident * ident * expr * renv 
  | VSkip 
  | VMem of valor * mem
and 
  renv = (ident * valor) list 
and 
  mem = (valor * valor) list
    
    
(* funções polimórficas para ambientes e memória *)

let rec lookup a k =
  match a with
    [] -> None
  | (y,i) :: tl -> if (y=k) then Some i else lookup tl k 
  
let rec update a k i =
  (k,i) :: a   

let rec assign m i v mt =
  match m with
    [] -> None (*qlqr coisa so retornar a memoria*)
  | (i_mem,v_mem) :: tl -> if (i=i_mem) then Some ((i, v) :: mt) else assign tl i v mt
          
let rec len lst =
  match lst with
  | [] -> 0 
  | _ :: tl -> 1 + len tl

(* exceções que não devem ocorrer  *)

exception BugParser
  
exception BugTypeInfer

exception EvalError of string
    
exception MtosPrintError
  
  (**+++++++++++++++++++++++++++++++++++++++++*)
(*         INFERÊNCIA DE TIPOS              *)
(*++++++++++++++++++++++++++++++++++++++++++*)


exception TypeError of string


let rec typeinfer (tenv:tenv) (e:expr) : tipo =
  match e with

    (* TInt  *)
  | Num _ -> TyInt

    (* TVar *)
  | Var x ->
      (match lookup tenv x with
         Some t -> t
       | None -> raise (TypeError ("variavel nao declarada:" ^ x)))

    (* TBool *)
  | True  -> TyBool
  | False -> TyBool

    (*TOP+  e outras para demais peradores binários *)
  | Binop(oper,e1,e2) ->
      let t1 = typeinfer tenv e1 in
      let t2 = typeinfer tenv e2 in
      if t1 = TyInt && t2 = TyInt then
        (match oper with
           Sum | Sub | Mult -> TyInt
         | Eq | Lt | Gt | Geq | Leq -> TyBool)
      else raise (TypeError "operando nao é do tipo int")

    (* TPair *)
  | Pair(e1,e2) -> TyPair(typeinfer tenv e1, typeinfer tenv e2)
  (* TFst *)
  | Fst e1 ->
      (match typeinfer tenv e1 with
         TyPair(t1,_) -> t1
       | _ -> raise (TypeError "fst espera tipo par"))
    (* TSnd  *)
  | Snd e1 ->
      (match typeinfer tenv e1 with
         TyPair(_,t2) -> t2
       | _ -> raise (TypeError "fst espera tipo par"))

    (* TIf  *)
  | If(e1,e2,e3) ->
      (match typeinfer tenv e1 with
         TyBool ->
           let t2 = typeinfer tenv e2 in
           let t3 = typeinfer tenv e3
           in if t2 = t3 then t2
           else raise (TypeError "then/else com tipos diferentes")
       | _ -> raise (TypeError "condição de IF não é do tipo bool"))

    (* TFn *)
  | Fn(x,t,e1) ->
      let t1 = typeinfer (update tenv x t) e1
      in TyFn(t,t1)

    (* TApp *)
  | App(e1,e2) ->
      (match typeinfer tenv e1 with
         TyFn(t, t') ->  if (typeinfer tenv e2) = t then t'
           else raise (TypeError "tipo argumento errado" )
       | _ -> raise (TypeError "tipo função era esperado"))

    (* TLet *)
  | Let(x,t,e1,e2) ->
      if (typeinfer tenv e1) = t then typeinfer (update tenv x t) e2
      else raise (TypeError "expr nao é do tipo declarado em Let" )

    (* TLetRec *)
  | LetRec(f,(TyFn(t1,t2) as tf), Fn(x,tx,e1), e2) ->
      let tenv_com_tf = update tenv f tf in
      let tenv_com_tf_tx = update tenv_com_tf x tx in
      if (typeinfer tenv_com_tf_tx e1) = t2
      then typeinfer tenv_com_tf e2
      else raise (TypeError "tipo da funcao diferente do declarado")
  | LetRec _ -> raise BugParser 
  
    (* T-Asg *)    
  | Asg(e1,e2) -> 
      (match typeinfer tenv e1 with 
         TyRef(t1) -> if (typeinfer tenv e2) = t1 then TyUnit
           else raise (TypeError "tipo do valor não é do tipo do endereço de memória" )
       | _ -> raise (TypeError "tipo do endereço de memória era esperado"))
                                                                               
    (* T-Dref *)
  | Dref(e1) -> 
      (match typeinfer tenv e1 with 
         TyRef(t1) -> t1
       | _ -> raise (TypeError "tipo do valor não é do tipo do endereço de memória"))
  
    (* T-New *)
  | New(e1) -> 
      let t1 = typeinfer tenv e1
      in TyRef(t1)
   
    (* T-Skip *)
  | Skip -> TyUnit

    (* T-While *)
  | Whl(e1,e2) ->
      (match typeinfer tenv e1 with
         TyBool ->
           (match typeinfer tenv e2 with
              TyUnit -> TyUnit 
            | _ -> raise(TypeError "condição de e2 em WHILE não é do tipo unit"))
       | _ -> raise(TypeError "condição de WHILE não é do tipo bool"))
                                                                               
    (* T-Seq *)
  | Seq(e1,e2) -> 
      (match typeinfer tenv e1 with
         TyUnit -> typeinfer tenv e2
       | _ -> raise(TypeError "e1 precisa ser do tipo unit em SEQ")) 
  
(**+++++++++++++++++++++++++++++++++++++++++*)
(*                 AVALIADOR                *)
(*++++++++++++++++++++++++++++++++++++++++++*)




let compute (mem: mem) (oper: op) (v1: valor) (v2: valor) : valor =
  match (oper, v1, v2) with
    (Sum, VNum(n1), VNum(n2)) -> VMem(VNum (n1 + n2),mem)
  | (Sub, VNum(n1), VNum(n2)) -> VMem(VNum (n1 - n2),mem)
  | (Mult, VNum(n1),VNum(n2)) -> VMem(VNum (n1 * n2),mem)
  | (Eq, VNum(n1), VNum(n2))  -> if (n1 = n2)  then VMem(VTrue,mem) else VMem(VFalse,mem)
  | (Gt, VNum(n1), VNum(n2))  -> if (n1 > n2)  then VMem(VTrue,mem) else VMem(VFalse,mem)
  | (Lt, VNum(n1), VNum(n2))  -> if (n1 < n2)  then VMem(VTrue,mem) else VMem(VFalse,mem)
  | (Geq, VNum(n1), VNum(n2)) -> if (n1 >= n2) then VMem(VTrue,mem) else VMem(VFalse,mem)
  | (Leq, VNum(n1), VNum(n2)) -> if (n1 <= n2) then VMem(VTrue,mem) else VMem(VFalse,mem)
  | _ -> raise BugTypeInfer


let rec eval (mem: mem) (renv:renv) (e:expr) : valor =
  match e with
    Num n -> VMem(VNum n,mem)
  | True -> VMem(VTrue,mem)
  | False -> VMem(VFalse,mem)

  | Var x ->
      (match lookup renv x with
         Some v -> VMem(v, mem)
       | None -> raise BugTypeInfer)
      
  | Binop(oper,e1,e2) ->
      let v1 = eval mem renv e1 in
      (match v1 with 
         VMem(x,mem') -> 
           let v2 = eval mem' renv e2 in
           (match v2 with
              VMem(z,mem'') ->
                compute mem'' oper x z
            | _ -> raise (EvalError "Binop - Argumento e2 não foi avaliado corretamente"))
       | _ -> raise (EvalError "Binop - Argumento e1 não foi avaliado corretamente"))

  | Pair(e1,e2) ->
      let v1 = eval mem renv e1 in
      (match v1 with
         VMem(x,mem') ->
           let v2 = eval mem' renv e2 in
           (match v2 with 
              VMem(z,mem'') -> VMem(VPair(v1,v2),mem'')
            | _ -> raise (EvalError "Pair - Argumento e2 não foi avaliado corretamente"))
       | _ -> raise (EvalError "Pair - Argumento e1 não foi avaliado corretamente"))
           

  | Fst e ->
      (match eval mem renv e with
       | VMem(VPair(v1,_),mem') -> VMem(v1,mem')
       | _ -> raise BugTypeInfer)

  | Snd e ->
      (match eval mem renv e with
       | VMem(VPair(_,v2),mem') -> VMem(v2,mem')
       | _ -> raise BugTypeInfer)


  | If(e1,e2,e3) ->
      (match eval mem renv e1 with
         VMem(VTrue,mem') -> eval mem' renv e2
       | VMem(VFalse,mem') -> eval mem' renv e3
       | _ -> raise BugTypeInfer )

  | Fn (x,_,e1) -> VMem(VClos(x,e1,renv),mem)

  | App(e1,e2) ->
      let v1 = eval mem renv e1 in
      (match v1 with 
         VMem(y,mem') -> 
           let v2 = eval mem' renv e2 in
           (match v2 with
              VMem(z,mem'') ->
                (match y with
                   VClos(x,ebdy,renv') ->
                     let renv'' = update renv' x z
                     in eval mem'' renv'' ebdy

                 | VRclos(f,x,ebdy,renv') ->
                     let renv''  = update renv' x z in
                     let renv''' = update renv'' f y
                     in eval mem'' renv''' ebdy
                 | _ -> raise BugTypeInfer) 
            |VSkip->(match y with
                  VClos(x,ebdy,renv') ->
                    let renv'' = update renv' x VSkip
                    in eval mem' renv'' ebdy

                | VRclos(f,x,ebdy,renv') ->
                    let renv''  = update renv' x VSkip in
                    let renv''' = update renv'' f VSkip
                    in eval mem' renv''' ebdy
                | _ -> raise BugTypeInfer) 
            | _ -> raise (EvalError "App - Argumento e2 não foi avaliado corretamente"))
       | _ -> raise (EvalError "App - Argumento e1 não foi avaliado corretamente"))
           
  | Let(x,_,e1,e2) ->
      let v1 = eval mem renv e1 in 
      (match v1 with 
         VMem(y,mem') -> eval mem' (update renv x y) e2
       | _ -> raise (EvalError "Let - Argumento e1 não foi avaliado corretamente"))

  | LetRec(f,TyFn(t1,t2),Fn(x,tx,e1), e2) when t1 = tx ->
      let renv'= update renv f (VRclos(f,x,e1,renv)) in 
      VMem(eval mem renv' e2,mem)
        
  | LetRec _ -> raise BugParser 

  | Asg(e1,e2) -> (* altera a memória *)
      let l = eval mem renv e1 in
      (match l with 
         VMem(x,mem') -> 
           let v = eval mem' renv e2 in 
           (match v with
              VMem(y,mem'') -> 
                (match (assign mem'' x y mem'') with
                   Some m -> VMem(VSkip,m)
                 | None -> raise(EvalError "Asg - Endereço não encontrado na memória"))
            | _ -> raise(EvalError "Asg - Argumento e2 não foi avaliado corretamente"))
       | _ -> raise BugTypeInfer)
        
  | Dref(e1) -> 
      let l = eval mem renv e1 in 
      (match l with 
         VMem(x,mem') -> 
           (match lookup mem' x with
              Some v -> VMem(v,mem')
            | None -> raise(EvalError "Dref - Endereço não encontrado na memória"))
       | _ -> raise (EvalError "Dref - Argumento e1 não foi avaliado corretamente"))
      
  
  | Seq(e1,e2) -> 
      let v1 = eval mem renv e1 in 
      (match v1 with
         VMem(v,mem') -> 
           if (v = VSkip) then eval mem' renv e2 
           else raise(EvalError "Seq - Expressão e1 não foi avaliada para Skip")  
       | _ -> raise(EvalError "Seq - Argumento e1 não foi avaliado corretamente"))
  
  
  (* se memória está vazia, endereço é 0, senão é o último endereço + 1 *)
  (* altera a memória *) 
  | New(e1) ->
      let v = eval mem renv e1 in
      (match v with 
         VMem(x,mem') -> 
           let l = VNum (len mem) in
           let mem' = (update mem l x) in VMem(l, mem')
       | _ -> raise BugTypeInfer)
  
  | Skip -> VSkip
    
  | Whl(e1, e2) ->
      let rec loop (m: mem) =
        let e1' = eval m renv e1 in 
        (match e1' with 
           VMem(b,m') -> 
             if (b = VTrue) 
             then let e2' = eval m' renv e2 in
               (match e2' with 
                  VMem(_,m'') -> loop(m'')
                | _ -> raise BugTypeInfer)
             else VMem(VSkip,m')
         | _ -> raise BugTypeInfer)
      in loop(mem)
        

  
let rec ttos (t:tipo) : string =
  match t with
    TyInt  -> "Int"
  | TyBool -> "Bool"
  | TyFn(t1,t2)   ->  "("  ^ (ttos t1) ^ " --> " ^ (ttos t2) ^ ")"
  | TyPair(t1,t2) ->  "("  ^ (ttos t1) ^ " * "   ^ (ttos t2) ^ ")"
  | TyRef(t1) -> "Ref " ^ (ttos t1)
  | TyUnit -> "Unit" 

(* função auxiliar que converte valor para string *)

let rec vtos (v: valor) : string =
  match v with
    VNum n -> string_of_int n
  | VTrue -> "True"
  | VFalse -> "False"
  | VPair(v1, v2) ->
      "(" ^ vtos v1 ^ "," ^ vtos v1 ^ ")"
  | VClos _ ->  "Fn"
  | VRclos _ -> "Fn"
  | VSkip -> "Skip" 
  | VMem(l,_) -> vtos l
                     
let rec mtos (v: valor) : string = 
  (match v with
     VMem(_, mem) -> 
       (match mem with
          [] -> ""
        |(i,k) :: tl -> ("(" ^(vtos i) ^ "," ^ (vtos k) ^ ") " ^ (mtos (VMem(VNum 0,tl)))))
   | _ -> raise MtosPrintError)

(* principal do interpretador *)

let int_bse (e:expr) : unit =
  try
    let t = typeinfer [] e in
    let v = eval [] [] e
    in  print_string ("Valor: " ^ (vtos v) ^ " ||| " ^ "Tipo: " ^ (ttos t) ^ " ||| " ^ "Memória: " ^ "[ " ^ (mtos v) ^ "]")
  with
    TypeError msg ->  print_string ("erro de tipo - " ^ msg)
   
 (* as exceções abaixo nao podem ocorrer   *)
  | BugTypeInfer  ->  print_string "corrigir bug em typeinfer"
  | BugParser     ->  print_string "corrigir bug no parser para let rec"
  | MtosPrintError    ->  print_string "corrigir bug no print do MemoryToString (mtos)"
                        



 (* +++++++++++++++++++++++++++++++++++++++*)
 (*                TESTES                  *)
 (*++++++++++++++++++++++++++++++++++++++++*)



(*
let x:int = 2 
in let foo: int --> int = fn y:int => x + y 
in let x: int = 5
in foo 10 
*)

let e'' = Let("x", TyInt, Num 5, App(Var "foo", Num 10))

let e'  = Let("foo", TyFn(TyInt,TyInt), Fn("y", TyInt, Binop(Sum, Var "x", Var "y")), e'')

let tst = Let("x", TyInt, Num(2), e') 
    
    (*
let x:int = 2 
in let foo: int --> int = fn y:int => x + y 
in let x: int = 5
in foo 
   *)


let e2 = Let("x", TyInt, Num 5, Var "foo")

let e1  = Let("foo", TyFn(TyInt,TyInt), Fn("y", TyInt, Binop(Sum, Var "x", Var "y")), e2)

let tst2 = Let("x", TyInt, Num(2), e1) 
    
let teste1 = Let("x", TyRef TyInt, New (Num 3),
                 Let("y", TyInt, Dref (Var "x"), 
                     Seq(Asg(Var "x", Binop(Sum, Dref(Var "x"), Num 1)), 
                         Binop(Sum, Var "y",  Dref (Var "x"))))) 
    
    
let teste2 = Let("x", TyRef TyInt, New (Num 0),
                 Let("y", TyRef TyInt, Var "x", 
                     Seq(Asg(Var "x", Num 1), 
                         Dref (Var "y"))))
    
let counter1 = Let("counter", TyRef TyInt, New (Num 0),
                   Let("next_val", TyFn(TyUnit, TyInt),
                       Fn("w", TyUnit, 
                          Seq(Asg(Var "counter",Binop(Sum, Dref(Var "counter"), Num 1)),
                              Dref (Var "counter"))),
                       Binop(Sum, App (Var "next_val", Skip), 
                             App (Var "next_val", Skip)))) 
    
let whilefat = Whl(Binop(Gt, Dref (Var "z"), Num 0), 
                   Seq( Asg(Var "y", Binop(Mult, Dref (Var "y"), Dref (Var "z"))), 
                        Asg(Var "z", Binop(Sub,  Dref (Var "z"), Num 1)))
                  ) 


let bodyfat = Let("z", 
                  TyRef TyInt, 
                  New (Var "x"),
                  Let("y", 
                      TyRef TyInt, 
                      New (Num 1), 
                      Seq (whilefat, Dref (Var "y"))))

let impfat = Let("fat", 
                 TyFn(TyInt,TyInt), 
                 Fn("x", TyInt, bodyfat), 
                 App(Var "fat", Num 5))    
    
  